events {}

http {
    server {
        listen 80;

        location /notebook/ {
            proxy_pass http://chat-api:8000/notebook/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /notebook {
            proxy_pass http://chat-api:8000/notebook;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /admin/ {
            proxy_pass http://chat-api:8000/admin/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /admin {
            proxy_pass http://chat-api:8000/admin;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /prometheus/ {
            # asking to chat-api if this request is from a valid admin
            auth_request /auth/validate_admin;

            # Pull the token from the cookie and send as Authorization header.
            # (Assuming you named the cookie "id_token")
            proxy_set_header Authorization "Bearer $cookie_id_token";

            # Proxy pass to the prometheus service
            proxy_pass http://prometheus:9090/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /grafana/ {
            # asking to chat-api if this request is from a valid admin
            auth_request /auth/validate_admin;

            # Pull the token from the cookie and send as Authorization header.
            # (Assuming you named the cookie "id_token")
            proxy_set_header Authorization "Bearer $cookie_id_token";

            # Proxy pass to the grafana service
            proxy_pass http://grafana:3000/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # location /public/ {
        #     # asking to chat-api if this request is from a valid admin
        #     auth_request /auth/validate_admin;

        #     # Pull the token from the cookie and send as Authorization header.
        #     # (Assuming you named the cookie "id_token")
        #     proxy_set_header Authorization "Bearer $cookie_id_token";

        #     # Proxy pass to the grafana service
        #     proxy_pass http://grafana:3000/public/;
        #     proxy_http_version 1.1;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header Upgrade $http_upgrade;
        #     proxy_set_header Connection "upgrade";
        # }

        location /login {
            # asking to chat-api if this request is from a valid admin
            auth_request /auth/validate_admin;

            # Pull the token from the cookie and send as Authorization header.
            # (Assuming you named the cookie "id_token")
            proxy_set_header Authorization "Bearer $cookie_id_token";

            # Proxy pass to the grafana service
            proxy_pass http://grafana:3000/login;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /mlflow/ {
            # asking to chat-api if this request is from a valid admin
            auth_request /auth/validate_admin;

            # Pull the token from the cookie and send as Authorization header.
            # (Assuming you named the cookie "id_token")
            proxy_set_header Authorization "Bearer $cookie_id_token";

            # Proxy pass to the MLflow service
            proxy_pass http://mlflow:5000;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /ajax-api/ {
            # asking to chat-api if this request is from a valid admin
            auth_request /auth/validate_admin;

            # Pull the token from the cookie and send as Authorization header.
            # (Assuming you named the cookie "id_token")
            proxy_set_header Authorization "Bearer $cookie_id_token";

            # Proxy pass to MLflow internal service
            proxy_pass http://mlflow:5000/ajax-api/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /graphql {
            # asking to chat-api if this request is from a valid admin
            auth_request /auth/validate_admin;

            # Pull the token from the cookie and send as Authorization header.
            # (Assuming you named the cookie "id_token")
            proxy_set_header Authorization "Bearer $cookie_id_token";

            # Proxy pass to MLflow internal service
            proxy_pass http://mlflow:5000/graphql;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /auth/validate_admin {
            internal;   # must not be called directly by clients

            # Again, forward the same cookieâ†’Authorization
            proxy_set_header Authorization "Bearer $cookie_id_token";

            proxy_pass_request_body off;
            proxy_set_header Content-Length "";

            proxy_pass http://chat-api:8000/auth/validate_admin;
        }

        # location / {
        #     proxy_pass http://host.docker.internal:5173/;
        #     proxy_http_version 1.1;
        #     proxy_set_header Upgrade $http_upgrade;
        #     proxy_set_header    Connection "Upgrade";
        #     # proxy_set_header Connection "";
        #     proxy_set_header Host $host;
        #     proxy_cache_bypass $http_upgrade;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        #     proxy_buffering off;
        #     proxy_cache off;
        #     proxy_request_buffering off;
        #     proxy_redirect off;

        #     # Passing the special header from chat-api (X-Accel-Buffering: no)
        #     # so that Nginx does not buffer the response at all
        #     proxy_set_header X-Accel-Buffering no;
        # }
    }
}